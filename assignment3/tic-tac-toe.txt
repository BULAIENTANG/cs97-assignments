As you go, keep a log in the file tic-tac-toe.txt of what you have done so 
that you can reproduce the results later. This should not merely be a 
transcript of what you typed: it should be more like a true lab notebook, in 
which you briefly note down what you did and what happened. Write down every 
significant action that you take, including installing and configuring 
components as well as any code that you write.

First: Setting up the environment
- download node.js from official website
- download Create React App with command
	'npx create-react-app tic-tac-toe'
- create two file and copy the code from the tutorial:
	index.css
	index.js

Second: Passing data through Props
- add the code below to the renderSquare function of class Board 
	'return <Square value={i} />;'
- this allows us to pass values to the Square
- add the code below to the render function of class Square
	{this.props.value}
- this loads and view the values passed by Board on each square

	# side note: props is used to pass data from from parets to children

Third: Implement interactive component
- create a constructor for Square class so that we could set its state:
	constructor(props) {
    	super(props);
    	this.state = {
      	value: null,
    };
  }
- place a X when we click on the square:
	<button className="square" onClick={() => this.setState({value: 'X'})}>
- change this.props.value to this.state.value (so that we could re-render 
the children component: Square whenever we clicked on it)

Fourth: Complete the game
- create a constructor for Board and initialize a size 9 array with null 
elements
	constructor(props) {
    	super(props);
    	this.state = {
      		squares: Array(9).fill(null),
    	};
  	}
- re-edit the renderSquare(i) function in Board so that it could pass the
 data to Square
	return <Square value={this.state.squares[i]} />;
- create a function handleClick() that the result would be passed to 
Square's onClick attribute
	onClick={() => this.handleClick(i)}
- change the state into props in Square and the setState function to 
this.props.onClick()
	{this.props.value}
	onClick={() => this.props.onClick()
- delete the constructor for Square since it no longer keeps track of the 
game's state
- define handleClick() in Board, so that whenever we clicked on the button, 
the onClick function in Square will call on the this.props.onClick() that 
Board passed to Square, which calls the handleClick() in the end
	handleClick(i) {
    	const squares = this.state.squares.slice();
    	squares[i] = 'X';
    	this.setState({squares: squares});
  	}
- change the Square class into a function component
	function Square(props) {
  		return (
    		<button className="square" onClick={props.onClick}>
      		{props.value}
    		</button>
  		);
	}

Fifth: Take turns
- create a Boolean called xIsNext, if it's true, then X should be placed, 
otherwise O should be placed.
	xIsNext: true,
- add a condition statement on handleClick to help to decide which to place
	squares[i] = this.state.xIsNext ? 'X' : 'O';
- revert the xIsNext everytime a X or O is placed:
	xIsNext: !this.state.xIsNext,
- change the status in Board's render() function so that it could give the 
next key to be placed:
	const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');

Sixth: determine the winner
- create a function to determine the winner by comparing the pattern given 
with the current pattern on Board
	function calculateWinner(squares) {
  		const lines = [
		    [0, 1, 2],
		    [3, 4, 5],
		    [6, 7, 8],
		    [0, 3, 6],
		    [1, 4, 7],
		    [2, 5, 8],
		    [0, 4, 8],
		    [2, 4, 6],
	  	];
	  	for (let i = 0; i < lines.length; i++) {
		    const [a, b, c] = lines[i];
		    if (squares[a] && squares[a] === squares[b] 
		    && squares[a] === squares[c]) {
		      return squares[a];
		    }
	  	}
	  	return null;
	}
- call the calculateWinner function in Board and check if any player wins, 
if one side wins, we show the infomation:
    const winner = calculateWinner(this.state.squares);
	    let status;
	    if (winner) {
	      status = 'Winner: ' + winner;
	    } else {
	      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');
    }
- when a square has been filled or the game has finished, we return from 
handleClick since no further move could be made on that square[]
	if (calculateWinner(squares) || squares[i]) {
      return;
    }

Seventh: Record the history
- store every historical steps made on squares into array that stores in Game
- lifting up the state from Board to the Game and let Game control the Board 
and render the history step
	constructor(props) {
    	super(props);
    	this.state = {
      		history: [{
        		squares: Array(9).fill(null),
      		}],
      		xIsNext: true,
    	};
  	}
- delete the constructor in Board, change the state into props, change the 
this.handleClick() into this.props.onClick()
  	value={this.props.squares[i]}
   	onClick={() => this.props.onClick(i)}
- update the render function in Game to show the game status with the most 
recent history
	const history = this.state.history;
    const current = history[history.length - 1];
    const winner = calculateWinner(current.squares);
    let status;
    if (winner) {
      status = 'Winner: ' + winner;
    } else {
      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');
    }
- remove the corresponding code in Board's render function
- change the handleClick function in Game and the setState function inside
	const history = this.state.history;
    const current = history[history.length - 1];
    const squares = current.squares.slice();

    history: history.concat([{
        squares: squares,
      }]),

Eighth: Show past moves
- map the steps and moves to button that could allow us to jump to certain 
past steps
    const moves = history.map((step, move) => {
      const desc = move ?
        'Go to move #' + move :
        'Go to game start';
      return (
        <li>
          <button onClick={() => this.jumpTo(move)}>{desc}</button>
        </li>
      );
    });
- add key as <li key={move}> in the render method of Game
- initialize a stepNumber: 0 in Game's constructor's initial state
- define jumpTo function and update the stepNumber to the step we are 
jumping to and the xIsNext value
	jumpTo(step) {
    	this.setState({
      		stepNumber: step,
      		xIsNext: (step % 2) === 0,
    	});
  	}
- modify the handleClick method in Game, and change the stepNumber in 
this.setState to be history.length
	stepNumber: history.length,
- make sure the old history after we go back is destroyed 
	const history = this.state.history.slice(0, this.state.stepNumber + 1);
- modify the render method and change the current move from the last move as 
before to the stepNumber
	const current = history[this.state.stepNumber]; 
	<= const current = history[history.length - 1];






















